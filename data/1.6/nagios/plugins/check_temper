#!/usr/bin/env php
<?php

/*

  check_temper - Version 1.4
  Written by Robbie Ferguson for NEMS Linux
  -----
  1.4 - January 31, 2020 - Add humidity sensor
  1.3 - August 4, 2019 - Automatically determine whether ARG is C or F and act accordingly
  1.2 - August 1, 2019 - Add UNKNOWN state if TEMPer is not connected
  1.1 - July 31, 2019 - Add exit codes
  1.0 - July 29, 2019 - Initial release 

*/

  if (count($argv) >=5) {
    array_shift($argv);
    $data['crit_low'] = intval(array_shift($argv));
    $data['warn_low'] = intval(array_shift($argv));
    $data['warn_high'] = intval(array_shift($argv));
    $data['crit_high'] = intval(array_shift($argv));
    $data['type'] = (strtolower(array_shift($argv)) ?: 'temp');

    if ($data['warn_high'] > 70) {
      // Over 70 Degrees: we're working in Fahrenheit
      $type = 'F';
    } else {
      $type = 'C';
    }
  } else {
    echo 'NEMS Linux TEMPer Check' . PHP_EOL;
    echo PHP_EOL . 'Usage:                 ' . $argv[0] . ' crit_low warn_low warn_high crit_high [temp|hum]' . PHP_EOL;
    echo 'Example (Temperature): ' . $argv[0] . ' 10 20 39 45 temp' . PHP_EOL;
    echo 'Example (Humidity):    ' . $argv[0] . ' 20 35 65 80 hum' . PHP_EOL;
    echo PHP_EOL . 'For backward compatibility, if type is not specified, temp is assumed.' . PHP_EOL;
    exit(3);
  }
  $tmp = json_decode(shell_exec('/usr/local/bin/nems-info temper'));
  if (is_array($tmp) && isset($tmp[0])) {
    $temper = $tmp[0]; unset($tmp);

    $data['temperature']['C'] = round($temper->{"internal temperature"},1);
    $data['temperature']['F'] = round(($data['temperature']['C'] * 1.8 + 32),1);

    if ($data['type'] == 'hum' && !isset($temper->{"internal humidity"})) {
      echo 'UNKNOWN - Your TEMPer device does not have a humidity sensor.';
      exit(3);
    } else {
      $data['humidity'] = round($temper->{"internal humidity"},1);
    }

    if ($data['type'] == 'temp') {
      if ($data['temperature'][$type] < $data['crit_low']) {
        echo 'CRITICAL - ' . $data['temperature']['C'] . '°C / ' . $data['temperature']['F'] . '°F (LOW)';
        exit(2);
      } elseif ($data['temperature'][$type] < $data['warn_low']) {
        echo 'WARNING - ' . $data['temperature']['C'] . '°C / ' . $data['temperature']['F'] . '°F (LOW)';
        exit(1);
      } elseif ($data['temperature'][$type] > $data['crit_high']) {
        echo 'CRITICAL - ' . $data['temperature']['C'] . '°C / ' . $data['temperature']['F'] . '°F (HIGH)';
        exit(2);
      } elseif ($data['temperature'][$type] > $data['warn_high']) {
        echo 'WARNING - ' . $data['temperature']['C'] . '°C / ' . $data['temperature']['F'] . '°F (HIGH)'; 
        exit(1);
      } else {
        echo 'OK - ' . $data['temperature']['C'] . '°C / ' . $data['temperature']['F'] . '°F'; 
        exit(0);
      }
    } elseif ($data['type'] == 'hum') {
      if ($data['humidity'] < $data['crit_low']) {
        echo 'CRITICAL - Humidity at ' . $data['humidity'] . '% (LOW)';
        exit(2);
      } elseif ($data['humidity'] < $data['warn_low']) {
        echo 'WARNING - Humidity at ' . $data['humidity'] . '% (LOW)';
        exit(1);
      } elseif ($data['humidity'] > $data['crit_high']) {
        echo 'CRITICAL - Humidity at ' . $data['humidity'] . '% (HIGH)';
        exit(2);
      } elseif ($data['humidity'] > $data['warn_high']) {
        echo 'WARNING - Humidity at ' . $data['humidity'] . '% (HIGH)'; 
        exit(1);
      } else {
        echo 'OK - Humidity at ' . $data['humidity'] . '%'; 
        exit(0);
      }
    } else {
      echo 'UNKNOWN - Invalid command type. Options are temp (temperature) or hum (humidity).';
      exit(3);
    }
  } else {
    echo 'UNKNOWN - TEMPer device disconnected or not present.';
    exit(3);
  }
?>
